#!/bin/bash

# SSL Setup Script for Let's Encrypt
# This script sets up SSL certificates using Certbot

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
DOMAIN=""
EMAIL=""
WEBROOT="/var/www/html"
NGINX_CONF_DIR="/etc/nginx/sites-available"
CERTBOT_AUTO_RENEW=true

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root or with sudo"
        exit 1
    fi
}

# Function to install certbot
install_certbot() {
    print_status "Installing Certbot..."
    
    # Update package list
    apt update
    
    # Install snapd if not present
    if ! command -v snap &> /dev/null; then
        print_status "Installing snapd..."
        apt install -y snapd
        systemctl enable snapd
        systemctl start snapd
    fi
    
    # Install certbot via snap
    if ! command -v certbot &> /dev/null; then
        print_status "Installing Certbot via snap..."
        snap install core; snap refresh core
        snap install --classic certbot
        ln -sf /snap/bin/certbot /usr/bin/certbot
    else
        print_status "Certbot is already installed"
    fi
}

# Function to setup SSL certificate
setup_ssl() {
    print_status "Setting up SSL certificate for $DOMAIN"
    
    # Check if nginx is running
    if ! systemctl is-active --quiet nginx; then
        print_error "Nginx is not running. Please start nginx first."
        exit 1
    fi
    
    # Test nginx configuration
    if ! nginx -t; then
        print_error "Nginx configuration test failed. Please fix nginx configuration first."
        exit 1
    fi
    
    # Create certificate
    print_status "Obtaining SSL certificate..."
    if certbot --nginx \
        -d "$DOMAIN" \
        -d "www.$DOMAIN" \
        --non-interactive \
        --agree-tos \
        --email "$EMAIL" \
        --redirect; then
        print_status "SSL certificate obtained successfully!"
    else
        print_error "Failed to obtain SSL certificate"
        exit 1
    fi
}

# Function to setup auto-renewal
setup_auto_renewal() {
    print_status "Setting up automatic certificate renewal..."
    
    # Create renewal script
    cat > /etc/cron.d/certbot-renew << EOF
# Renew Let's Encrypt certificates twice daily
0 0,12 * * * root certbot renew --quiet --post-hook "systemctl reload nginx"
EOF
    
    # Test renewal
    print_status "Testing certificate renewal..."
    if certbot renew --dry-run; then
        print_status "Certificate renewal test passed!"
    else
        print_warning "Certificate renewal test failed, but continuing..."
    fi
}

# Function to create nginx SSL configuration template
create_ssl_nginx_config() {
    local domain=$1
    local app_name=${2:-web-app}
    
    cat > "$NGINX_CONF_DIR/$app_name-ssl.conf" << EOF
# SSL configuration for $domain
# Generated by ssl-setup.sh

server {
    listen 80;
    server_name $domain www.$domain;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $domain www.$domain;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$domain/chain.pem;
    
    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; frame-ancestors 'self';" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone \$binary_remote_addr zone=general:10m rate=1r/s;

    # Main location block
    location / {
        limit_req zone=general burst=20 nodelay;
        
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # API rate limiting
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /_next/static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
    }

    location /health {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
        access_log off;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /\.env {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /var/www/html;
        internal;
    }

    # Logging
    access_log /var/log/nginx/$app_name\_ssl_access.log;
    error_log /var/log/nginx/$app_name\_ssl_error.log;
}
EOF
    
    print_status "SSL Nginx configuration created at $NGINX_CONF_DIR/$app_name-ssl.conf"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 -d DOMAIN -e EMAIL [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -d, --domain DOMAIN     Domain name (required)"
    echo "  -e, --email EMAIL       Email address for Let's Encrypt (required)"
    echo "  -w, --webroot PATH      Webroot path (default: $WEBROOT)"
    echo "  -n, --no-auto-renew     Disable automatic renewal setup"
    echo "  -c, --config-only       Only create nginx configuration, don't obtain certificate"
    echo "  -h, --help              Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 -d example.com -e admin@example.com"
    echo "  $0 -d example.com -e admin@example.com --no-auto-renew"
    echo "  $0 -d example.com -e admin@example.com --config-only"
}

# Parse command line arguments
CONFIG_ONLY=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--domain)
            DOMAIN="$2"
            shift 2
            ;;
        -e|--email)
            EMAIL="$2"
            shift 2
            ;;
        -w|--webroot)
            WEBROOT="$2"
            shift 2
            ;;
        -n|--no-auto-renew)
            CERTBOT_AUTO_RENEW=false
            shift
            ;;
        -c|--config-only)
            CONFIG_ONLY=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$DOMAIN" ]]; then
    print_error "Domain is required"
    show_usage
    exit 1
fi

if [[ -z "$EMAIL" ]] && [[ "$CONFIG_ONLY" == false ]]; then
    print_error "Email is required"
    show_usage
    exit 1
fi

# Main execution
print_status "Starting SSL setup for $DOMAIN"

if [[ "$CONFIG_ONLY" == true ]]; then
    print_status "Creating SSL configuration only..."
    create_ssl_nginx_config "$DOMAIN"
    print_status "SSL configuration created. Run 'nginx -t' to test and 'systemctl reload nginx' to apply."
else
    check_root
    install_certbot
    setup_ssl
    
    if [[ "$CERTBOT_AUTO_RENEW" == true ]]; then
        setup_auto_renewal
    fi
    
    # Create updated nginx configuration
    create_ssl_nginx_config "$DOMAIN"
    
    print_status "SSL setup completed successfully!"
    print_status "Your site should now be accessible at https://$DOMAIN"
    print_warning "Don't forget to update your nginx configuration and reload nginx:"
    echo "  sudo ln -sf $NGINX_CONF_DIR/web-app-ssl.conf /etc/nginx/sites-enabled/"
    echo "  sudo nginx -t"
    echo "  sudo systemctl reload nginx"
fi